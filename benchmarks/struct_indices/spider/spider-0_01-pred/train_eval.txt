eval_err_num:1
easy pred: SELECT born_state FROM head_state WHERE count >= 3;
easy gold: SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3

eval_err_num:2
medium pred: SELECT c.full_name, c.phone FROM Customers c INNER JOIN Customers_Cards cc ON c.customer_id = cc.customer_id WHERE cc.card_number = '4560596484842';
medium gold: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  "4560596484842"

eval_err_num:3
easy pred: SELECT COUNT(*) FROM student s INNER JOIN advisor a ON s.s_ID = a.s_ID;
easy gold: SELECT count(DISTINCT s_id) FROM advisor

extra pred: SELECT Name, Country FROM artist WHERE Artist_ID = (SELECT Artist_ID FROM exhibition GROUP BY Artist_ID ORDER BY COUNT(*) DESC LIMIT 1);
extra gold: SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:4
extra pred: SELECT i.name, i.i_id FROM item i INNER JOIN review r ON i.i_id = r.i_id GROUP BY i.name, i.i_id ORDER BY AVG(r.rating) DESC LIMIT 1;
extra gold: SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1

eval_err_num:5
medium pred: SELECT c.custid, c.balance + s.balance AS total_balance FROM CHECKING c JOIN SAVINGS s ON c.custid = s.custid ORDER BY total_balance ASC;
medium gold: SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance

eval_err_num:6
hard pred: SELECT c.custid, c.balance + s.balance AS total_balance FROM CHECKING c INNER JOIN SAVINGS s ON c.custid = s.custid WHERE s.balance < c.balance;
hard gold: SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance

eval_err_num:7
easy pred: SELECT DISTINCT payment_type_code, payment_type_description FROM Payment_Types;
easy gold: SELECT DISTINCT payment_type_code FROM payments

eval_err_num:8
medium pred: SELECT COUNT(DISTINCT driverId) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2009;
medium gold: SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = "Australian Grand Prix" AND YEAR = 2009

medium pred: SELECT Company FROM entrepreneur WHERE Investor != 'Rachel Elnaugh';
medium gold: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != "Rachel Elnaugh"

eval_err_num:9
extra pred: SELECT Party_ID FROM delegates ORDER BY Delegates DESC LIMIT 1;
extra gold: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1

eval_err_num:10
hard pred: SELECT payment_date FROM payment INNER JOIN staff ON payment.staff_id = staff.staff_id WHERE amount > 10 AND first_name = 'Elsa';
hard gold: SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'

hard pred: SELECT cust_name FROM customer WHERE acc_type != 'S';
hard gold: SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'

eval_err_num:11
medium pred: SELECT date_incident_start, date_incident_end FROM Behavior_Incident INNER JOIN Student ON Behavior_Incident.student_id = Student.student_id WHERE last_name = 'Fahey';
medium gold: SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  "Fahey"

eval_err_num:12
medium pred: SELECT Parts.part_name, COUNT(Asset_Parts.asset_id) AS num_assets FROM Parts INNER JOIN Asset_Parts ON Parts.part_id = Asset_Parts.part_id GROUP BY Parts.part_name;
medium gold: SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name

eval_err_num:13
extra pred: SELECT DEPT_NAME, DEPT_ADDRESS FROM DEPARTMENT INNER JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPT_NAME, DEPT_ADDRESS ORDER BY COUNT(STUDENT_ID) DESC LIMIT 1;
extra gold: SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:14
extra pred: SELECT STU_FNAME FROM STUDENT INNER JOIN COURSE ON STUDENT.DEPT_CODE = COURSE.DEPT_CODE WHERE STU_LNAME LIKE 'S%' AND COURSE_NUM = 'ACCT-211';
extra gold: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'

eval_err_num:15
medium pred: SELECT countries.COUNTRY_ID, COUNT(cities.CITY_ID) FROM countries INNER JOIN cities ON countries.COUNTRY_ID = cities.COUNTRY_ID GROUP BY countries.COUNTRY_ID;
medium gold: SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id

medium pred: SELECT f_id FROM song ORDER BY resolution DESC LIMIT 1;
medium gold: SELECT f_id FROM files ORDER BY duration DESC LIMIT 1

hard pred: SELECT f_id FROM files WHERE formats = 'mp4' AND file_size < 1000;
hard gold: SELECT f_id FROM files WHERE formats  =  "mp4" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000

eval_err_num:16
medium pred: SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment INNER JOIN Student ON Student_Course_Enrolment.student_id = Student.student_id WHERE Student.first_name = 'Karson';
medium gold: SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  "Karson"

eval_err_num:17
medium pred: SELECT student_id, middle_name FROM Student WHERE student_id IN (SELECT student_id FROM Student_Course_Enrolment GROUP BY student_id HAVING COUNT(*) <= 2);
medium gold: SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2

eval_err_num:18
medium pred: SELECT Amount_Claimed, Amount_Settled FROM Settlements INNER JOIN Claims ON Settlements.Claim_ID = Claims.Claim_ID WHERE Amount_Settled = (SELECT MIN(Amount_Settled) FROM Settlements);
medium gold: SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1

eval_err_num:19
hard pred: SELECT Physician FROM Trained_In INNER JOIN Procedures ON Trained_In.Treatment = Procedures.Procedure WHERE Procedures.Cost > 5000;
hard gold: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000

eval_err_num:20
easy pred: SELECT COUNT(*) FROM students; Answer: The number of students is [number
easy gold: SELECT count(*) FROM list

eval_err_num:21
extra pred: SELECT ClubID, COUNT(*) AS NumMembers FROM ClubMembers WHERE MemberMajor = '600' GROUP BY ClubID ORDER BY NumMembers DESC LIMIT 1;
extra gold: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  "600" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT organisation_id, organisation_details FROM Organisations WHERE organisation_type = 'involved in';
medium gold: SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000

eval_err_num:22
hard pred: SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(DISTINCT product_id) >= 3);
hard gold: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3

eval_err_num:23
easy pred: SELECT COUNT(*) FROM Position WHERE posName = 'mid' AND cName NOT IN (SELECT cName FROM Position WHERE posName = 'goalie');
easy gold: SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')

hard pred: SELECT DISTINCT Product_Name, Product_Price FROM Products WHERE Product_Price > (SELECT AVG(Product_Price) FROM Products);
hard gold: SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)

eval_err_num:24
easy pred: "SELECT Name FROM Manufacturers WHERE Revenue BETWEEN 100 AND 150;"
easy gold: SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150

eval_err_num:25
medium pred: SELECT COUNT(*) FROM Voting_record v INNER JOIN Student s ON v.StuID = s.StuID WHERE s.Sex = 'M' AND v.Election_Cycle = 'Fall' AND v.Class_Senator_Vote > 0;
medium gold: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  "M" AND T2.Election_Cycle  =  "Fall"

eval_err_num:26
easy pred: SELECT MAX(Level) FROM manager WHERE Country NOT IN (SELECT Country_Name FROM country WHERE Country_Name = 'Australia');
easy gold: SELECT max(LEVEL) FROM manager WHERE Country != "Australia "

eval_err_num:27
medium pred: SELECT COUNT(DISTINCT MajorID) AS 'Number of Majors', COUNT(DISTINCT CityCode) AS 'Number of City Codes' FROM Major, City;
medium gold: SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student

eval_err_num:28
extra pred: SELECT town_city FROM Customer_Count WHERE customer_type_code = 'Good Credit Rating' ORDER BY customer_count ASC LIMIT 1;
extra gold: SELECT town_city FROM customers WHERE customer_type_code  =  "Good Credit Rating" GROUP BY town_city ORDER BY count(*) LIMIT 1

easy pred: SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%';
easy gold: SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  "bus"

eval_err_num:29
easy pred: SELECT country, COUNT(*) AS num_addresses FROM Addresses GROUP BY country HAVING num_addresses > 4;
easy gold: SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4

eval_err_num:30
extra pred: SELECT City_Name FROM cities INNER JOIN temperature ON cities.City_ID = temperature.City_ID WHERE Host_City = 1 AND Mar < Jul;
extra gold: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city

hard pred: SELECT Home_city FROM driver WHERE Age < 40;
hard gold: SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40

hard pred: SELECT Rank, COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC; Answer: The faculty rank with the least members is the rank that is returned first in the query results.
hard gold: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1

hard pred: SELECT FacID FROM Faculty WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in);
hard gold: SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in

eval_err_num:31
extra pred: SELECT name, COUNT(*) AS num_routes FROM routes JOIN airlines ON routes.alid = airlines.alid GROUP BY name ORDER BY num_routes DESC LIMIT 1; Answer: The airline with the most routes is [name of airline
extra gold: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1

eval_err_num:32
hard pred: SELECT state_name FROM country WHERE country_name IN (SELECT country_name FROM river ORDER BY length DESC LIMIT 1);
hard gold: SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );

eval_err_num:33
hard pred: SELECT capital_name, MAX(population) FROM capital;
hard gold: SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );

eval_err_num:34
medium pred: SELECT state.capital FROM state INNER JOIN city ON state.state_name = city.state_name WHERE city.city_name = 'durham';
medium gold: SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  "durham";

eval_err_num:35
extra pred: SELECT river.river_name, river.length FROM river INNER JOIN texas ON river.river_name = texas.river_name WHERE texas.state_name = 'TX' ORDER BY river.length ASC LIMIT 1;
extra gold: SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas";

eval_err_num:36
extra pred: SELECT COUNT(*) FROM paper INNER JOIN author ON paper.authorId = author.authorId WHERE author.name = 'David M. Blei' AND paper.conference = 'AISTATS';
extra gold: SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS";

eval_err_num:37
extra pred: SELECT paperId, title, year, numCiting, numCitedBy FROM paper WHERE title LIKE '%TAIL%' AND venueId IN (SELECT venueId FROM venue WHERE name = 'NIPS')
extra gold: SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS";

eval_err_num:38
extra pred: SELECT * FROM paperDataset WHERE paperTopic = 'deep learning' ORDER BY paperDate DESC; Answer: The query will return the most recent papers related to deep learning.
extra gold: SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC;

eval_err_num:39
medium pred: SELECT * FROM paper INNER JOIN venue ON paper.venueId = venue.venueId WHERE venue.name = 'PLDI' AND paper.year = 2015;
medium gold: SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi";

eval_err_num:40
medium pred: SELECT name FROM author INNER JOIN paper_author ON author.authorId = paper_author.authorId INNER JOIN paper ON paper_author.paperId = paper.paperId WHERE paper.year = 2015;
medium gold: SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;

eval_err_num:41
medium pred: SELECT name, rating FROM business INNER JOIN restaurant ON business.business_id = restaurant.business_id WHERE city = 'Dallas' AND rating > 4.5;
medium gold: SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Dallas" AND t1.rating  >  4.5 AND t2.category_name  =  "restaurant";

eval_err_num:42
easy pred: SELECT * FROM cite WHERE title = 'Making database systems usable';
easy gold: SELECT reference_num FROM publication WHERE title  =  "Making database systems usable";

eval_err_num:43
extra pred: SELECT name FROM author WHERE university = 'University of Michigan' AND author_id IN (SELECT author_id FROM paper WHERE paper_id IN (SELECT cited FROM cite GROUP BY cited ORDER BY COUNT(*) DESC LIMIT 1))
extra gold: SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  "University of Michigan" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;

eval_err_num:44
hard pred: SELECT genre FROM movie INNER JOIN genre ON movie.gid = genre.gid WHERE title = 'Jurassic Park'; Answer: The genre of the movie "Jurassic Park" is Adventure.
hard gold: SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "Jurassic Park";

eval_err_num:45
hard pred: SELECT actors.name FROM actors INNER JOIN cast ON actors.id = cast.aid INNER JOIN movies ON movies.id = cast.msid WHERE movies.title = 'Camp X-Ray';
hard gold: SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  "Camp X-Ray";

eval_err_num:46
extra pred: SELECT title FROM movie INNER JOIN movie_director ON movie.mid = movie_director.mid INNER JOIN director ON movie_director.did = director.did WHERE director.name = 'Jim Jarmusch' ORDER BY release_year DESC LIMIT 1;
extra gold: SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Jim Jarmusch" ORDER BY t3.release_year DESC LIMIT 1;

eval_err_num:47
extra pred: SELECT title FROM movie INNER JOIN movie_director ON movie.mid = movie_director.mid INNER JOIN director ON movie_director.did = director.did WHERE director.name = 'Jim Jarmusch' ORDER BY release_year DESC LIMIT 1;
extra gold: SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Jim Jarmusch" ORDER BY t3.release_year DESC LIMIT 1;

                     easy                 medium               hard                 extra                all                 
count                24                   28                   17                   17                   86                  
=====================   EXECUTION ACCURACY     =====================
execution            0.375                0.286                0.235                0.118                0.267               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.583                0.357                0.176                0.059                0.326               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               1.000                0.923                0.778                1.000                0.923               
select(no AGG)       1.000                0.923                0.778                1.000                0.923               
where                0.833                0.833                0.429                0.500                0.667               
where(no OP)         1.000                0.833                0.429                0.500                0.714               
group(no Having)     0.000                1.000                1.000                1.000                1.000               
group                0.000                1.000                1.000                1.000                1.000               
order                1.000                0.750                0.500                1.000                0.800               
and/or               1.000                0.857                1.000                0.765                0.906               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.889                0.909                0.444                0.500                0.742               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.625                0.429                0.412                0.118                0.419               
select(no AGG)       0.625                0.429                0.412                0.118                0.419               
where                0.556                0.357                0.273                0.083                0.304               
where(no OP)         0.667                0.357                0.273                0.083                0.326               
group(no Having)     0.000                0.333                0.667                0.111                0.250               
group                0.000                0.333                0.667                0.111                0.250               
order                1.000                0.500                0.500                0.083                0.348               
and/or               1.000                1.000                0.941                1.000                0.987               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.571                0.400                0.235                0.059                0.315               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.769                0.585                0.538                0.211                0.576               
select(no AGG)       0.769                0.585                0.538                0.211                0.576               
where                0.667                0.500                0.333                0.143                0.418               
where(no OP)         0.800                0.500                0.333                0.143                0.448               
group(no Having)     1.000                0.500                0.800                0.200                0.400               
group                1.000                0.500                0.800                0.200                0.400               
order                1.000                0.600                0.500                0.154                0.485               
and/or               1.000                0.923                0.970                0.867                0.945               
IUEN                 1.000                1.000                1.000                1.000                1.000               
keywords             0.696                0.556                0.308                0.105                0.442               
